package com.asia.yongyou.yongyouagent.ws;import android.content.Context;import com.asia.yongyou.yongyouagent.constant.Constant;import com.asia.yongyou.yongyouagent.utils.ViewUtils;import com.loopj.android.http.AsyncHttpClient;import com.loopj.android.http.BinaryHttpResponseHandler;import com.loopj.android.http.JsonHttpResponseHandler;import com.loopj.android.http.PersistentCookieStore;import com.loopj.android.http.RequestHandle;import com.loopj.android.http.RequestParams;import com.loopj.android.http.TextHttpResponseHandler;import org.json.JSONObject;import cz.msebera.android.httpclient.Header;/** * HTTP请求客户端 * @author : chengcs * @create_time : 2015年3月24日 上午10:55:59 * @desc : TODO * @update_person: * @update_time : * @update_desc : * */public class WSClient {	public static final int TIMEOUT = 25000;	private static AsyncHttpClient client=new AsyncHttpClient();		public static void reset(Context context) {	    		// 如果已经创建了客户端，则取消所有进行中的客户端		if (client != null)			client.cancelRequests(context, true);		client = new AsyncHttpClient();		PersistentCookieStore cookieStore = new PersistentCookieStore(context);        cookieStore.clear();        client.setCookieStore(cookieStore);		client.setMaxRetriesAndTimeout(3,TIMEOUT);//		client.setCookieStore(new PersistentCookieStore(context));	}	public static void clear(Context context) {		PersistentCookieStore cookieStore = new PersistentCookieStore(context);		cookieStore.clear();	}	public static void cancel(Context context) {		if (client != null)			client.cancelRequests(context, true);	}	/**	 *  发送http请求，返回json数据	 * @param context	 * @param url	 * @param data	 * @param responseHandler	 * @return	 */	public static RequestHandle getJson(Context context , final String url, RequestParams data,	                                    final BaseResponseHandler responseHandler) {	    return getJson(context, url, TIMEOUT, data, responseHandler);	}		/**	 *  发送http请求，返回json数据	 * @param context	 * @param url	 * @param timeout	 * @param data	 * @param responseHandler	 * @return	 */    public static RequestHandle getJson(Context context , final String url, int timeout , RequestParams data,                                        final BaseResponseHandler responseHandler) {		try {		     //检查网络连接		     if(!ViewUtils.checkNetworkWithToast(context)) {		         return null;		     }            		     //时间戳		     if(data != null) {		         data.put("timestamp", System.currentTimeMillis());		     }		     		     //超时时间 client.setTimeout(timeout);		     return client.post(context, getAbsoluteUrl(url), data,new JsonHttpResponseHandler() {                @Override                public void onStart()                {                    responseHandler.onStart();                }			     @Override                public void onSuccess(int statusCode, Header[] headers,                        JSONObject response) {                    responseHandler.onSuccess(statusCode, response);                }                @Override                public void onFailure(int statusCode, Header[] headers, Throwable throwable, JSONObject errorResponse) {                    responseHandler.onFailure(throwable, "");                }                @Override                public void onFailure(int statusCode, Header[] headers,                                      String responseString, Throwable throwable) {                    responseHandler.onFailure(throwable, "");                }                @Override                public void onFinish()                {                    responseHandler.onFinish();                }		        		    });		} catch (Exception e) {			responseHandler.onFailure(e, "");		}		return null;	}		/**	 *  发送http请求，返回string数据	 * @param context	 * @param url	 * @param data	 * @param responseHandler	 * @return	 */	public static RequestHandle getStr(Context context , final String url, RequestParams data,	                                   final BaseResponseHandler responseHandler) {	    try {	        return client.get(context, getAbsoluteUrl(url), data,new TextHttpResponseHandler(Constant.CHARSET_UTF8)	        {	            	            @Override	            public void onStart()	            {	                responseHandler.onStart();	            }	                            @Override                public void onFailure(int statusCode, Header[] headers, byte[] responseBytes,                        Throwable throwable)                {                    super.onFailure(statusCode, headers, responseBytes, throwable);                }                @Override                public void onSuccess(int statusCode, Header[] headers,                        String responseBody)                {                    responseHandler.onSuccess(statusCode, responseBody);                }	            @Override	            public void onFailure(int statusCode, Header[] headers,	                                  String responseString, Throwable throwable)	            {	                responseHandler.onFailure(throwable, "");	            }	            	            @Override	            public void onFinish()	            {	                responseHandler.onFinish();	            }	            	        });	    } catch (Exception e) {	        responseHandler.onFailure(e, "");	    }	    return null;	}		private static String getAbsoluteUrl(String relativeUrl) {	      return Constant.BASE_URL + relativeUrl;	  }	/**	 *  发送http请求，返回json数据	 * @param context	 * @param url	 * @param timeout	 * @param responseHandler	 * @return	 */    public static RequestHandle getImage(Context context , final String url, int timeout ,                                         final BinaryHttpResponseHandler responseHandler) {		try {		     //检查网络连接		     if(!ViewUtils.checkNetworkWithToast(context)) {		         return null;		     }		     //超时时间		     client.setTimeout(timeout);		     return client.get(context, getAbsoluteUrl(url),new BinaryHttpResponseHandler() {				@Override				public void onSuccess(int statusCode, Header[] headers, byte[] binaryData) {					responseHandler.onSuccess(statusCode, headers, binaryData);				}								@Override				public void onFailure(int statusCode, Header[] headers, byte[] binaryData,						Throwable error) {					responseHandler.onFailure(statusCode, headers, binaryData, error);				}					            @Override	            public void onFinish()	            {	                responseHandler.onFinish();	            }			});		} catch (Exception e) {			responseHandler.onFailure(9999, null, null, null);		}		return null;	}        /**     *  发送http请求，返回string数据     * @param context     * @param url     * @param data     * @param responseHandler     * @return     */    public static RequestHandle getAuthor(Context context , final String url, RequestParams data,                                          final BaseResponseHandler responseHandler) {                try {                        return client.get(context, url, data,new TextHttpResponseHandler(Constant.CHARSET_UTF8) {                                @Override                public void onFailure(int statusCode, Header[] headers, byte[] responseBytes,                        Throwable throwable) {                    super.onFailure(statusCode, headers, responseBytes, throwable);                }                @Override                public void onSuccess(int statusCode, Header[] headers,                        String responseBody) {                    responseHandler.onSuccess(statusCode, responseBody);                }                @Override                public void onFailure(int statusCode, Header[] headers,                                      String responseString, Throwable throwable) {                    responseHandler.onFailure(throwable, "");                }                                @Override                public void onFinish()                {                    responseHandler.onFinish();                }                            });        } catch (Exception e) {            responseHandler.onFailure(e, "");        }        return null;    }}